"""
Django settings for pm project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from django.urls import reverse_lazy
# from celery.task.schedules import crontab
# from celery.schedules import crontab
import logging.config
LOGGING_CONFIG = None
from .celery import app
from celery.schedules import crontab
from datetime import timedelta
import threading
import time
import schedule
import queue
# def job():
#     print("I'm working")
#
#
# def worker_main():
#     while 1:
#         job_func = jobqueue.get()
#         job_func()
#         jobqueue.task_done()
#
# jobqueue = queue.Queue()
#
# schedule.every(1000).seconds.do(jobqueue.put, job)
# # schedule.every(1000).seconds.do(jobqueue.put, job)
# # schedule.every(1012).seconds.do(jobqueue.put, job)
# # schedule.every(1011).seconds.do(jobqueue.put, job)
# # schedule.every(101).seconds.do(jobqueue.put, job)
#
# worker_thread = threading.Thread(target=worker_main)
# worker_thread.start()
#
# while 1:
#     schedule.run_pending()
#     time.sleep(1)

# @repeat(every(1).seconds)
# def job():
#     print("I am a scheduled job")
#
# while True:
#     run_pending()
#     time.sleep(1)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'mihn3y3afcnbb4)%lq5xpss%2mdi^a#60b4i_=@j5c56j9n09-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.2.175','127.0.0.1','192.168.1.50','172.17.153.145','172.16.2.149']


# Application definition

INSTALLED_APPS = [
    'admin_view_permission',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cmms.apps.CmmsConfig',
    'widget_tweaks',
	'background_task',
    'mathfilters',
     'rest_framework',
     'django.contrib.humanize',
     'corsheaders',


     # 'channels',
     # 'utils_tags',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True # If this is used then `CORS_ALLOWED_ORIGINS` will not have any effect
# CORS_ALLOW_METHODS = [
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
# ]
# CORS_ALLOW_HEADERS = [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]

ROOT_URLCONF = 'pm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
				'django.template.context_processors.media',
            ],
        },
    },
]
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'asgi_redis.RedisChannelLayer',
#         'CONFIG': {
#             'hosts': [('localhost', 6379)],
#         },
#         'ROUTING': 'example_channels.routing.channel_routing',
#     }
# }

WSGI_APPLICATION = 'pm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'cmms4',
#         'USER': 'monty',
#         'PASSWORD': '84281734Man!@#',
#         'HOST': '192.168.183.130',
#         'PORT': '3306',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'sss',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

# USE_I18N = True
#
# USE_L10N = True
#
#
# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
LOGIN_REDIRECT_URL = 'list_dashboard'
LOGIN_URL='login'
# CELERY STUFF
BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tehran'

CELERY_BEAT_SCHEDULE = {
 'send-summary-every-hour': {
       'task': 'summary',
        # There are 4 ways we can handle time, read further
       'schedule': 4.0,
        # If you're using any arguments
       'args': ("‘We don’t need any’,"),
    },
    # Executes every Friday at 4pm
    'send-notification-on-friday-afternoon': {
         'task': 'cmms.tasks.send_notification',
         'schedule':  crontab( minute="*/1"),
        },
}



LOGGING ={
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': 'tmp/Debug.log'
        }
    },
    'loggers': {

        'django.request': {
            'level': 'DEBUG',
            'handlers': ['console', 'file']
        }
    }
}
logging.config.dictConfig(LOGGING)

# ABSOULTE_URL_OVERRIDES={
#     'auth_user':lambda u:reverse_lazy('user_update',args=[u.id])
# }
<<<<<<< Updated upstream
=======
DEFAULT_AUTO_FIELD='django.db.models.AutoField'




# CELERY_BROKER_URL = 'redis://localhost:6379'
# CELERY_TIMEZONE = 'Europe/Warsaw'
# Let's make things happen
>>>>>>> Stashed changes
